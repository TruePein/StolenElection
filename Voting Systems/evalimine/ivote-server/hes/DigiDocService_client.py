##################################################
# file: DigiDocService_client.py
#
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/bin/wsdl2py --complexType https://www.openxades.org:9443/?wsdl
#
##################################################

from DigiDocService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class DigiDocServiceLocator:
    DigiDocService_address = "https://www.openxades.org:9443/DigiDocService"
    def getDigiDocServiceAddress(self):
        return DigiDocServiceLocator.DigiDocService_address
    def getDigiDocService(self, url=None, **kw):
        return DigiDocServiceSOAP(url or DigiDocServiceLocator.DigiDocService_address, **kw)

# Methods
class DigiDocServiceSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: StartSession
    def StartSession(self, request, **kw):
        if isinstance(request, StartSession) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=StartSessionResponse.typecode.ofwhat, pyclass=StartSessionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: CloseSession
    def CloseSession(self, request, **kw):
        if isinstance(request, CloseSession) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=CloseSessionResponse.typecode.ofwhat, pyclass=CloseSessionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: CreateSignedDoc
    def CreateSignedDoc(self, request, **kw):
        if isinstance(request, CreateSignedDoc) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=CreateSignedDocResponse.typecode.ofwhat, pyclass=CreateSignedDocResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: AddDataFile
    def AddDataFile(self, request, **kw):
        if isinstance(request, AddDataFile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=AddDataFileResponse.typecode.ofwhat, pyclass=AddDataFileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: RemoveDataFile
    def RemoveDataFile(self, request, **kw):
        if isinstance(request, RemoveDataFile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=RemoveDataFileResponse.typecode.ofwhat, pyclass=RemoveDataFileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetSignedDoc
    def GetSignedDoc(self, request, **kw):
        if isinstance(request, GetSignedDoc) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetSignedDocResponse.typecode.ofwhat, pyclass=GetSignedDocResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetSignedDocInfo
    def GetSignedDocInfo(self, request, **kw):
        if isinstance(request, GetSignedDocInfo) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetSignedDocInfoResponse.typecode.ofwhat, pyclass=GetSignedDocInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetDataFile
    def GetDataFile(self, request, **kw):
        if isinstance(request, GetDataFile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetDataFileResponse.typecode.ofwhat, pyclass=GetDataFileResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetSignersCertificate
    def GetSignersCertificate(self, request, **kw):
        if isinstance(request, GetSignersCertificate) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetSignersCertificateResponse.typecode.ofwhat, pyclass=GetSignersCertificateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetNotarysCertificate
    def GetNotarysCertificate(self, request, **kw):
        if isinstance(request, GetNotarysCertificate) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetNotarysCertificateResponse.typecode.ofwhat, pyclass=GetNotarysCertificateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetNotary
    def GetNotary(self, request, **kw):
        if isinstance(request, GetNotary) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetNotaryResponse.typecode.ofwhat, pyclass=GetNotaryResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetTSACertificate
    def GetTSACertificate(self, request, **kw):
        if isinstance(request, GetTSACertificate) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetTSACertificateResponse.typecode.ofwhat, pyclass=GetTSACertificateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetTimestamp
    def GetTimestamp(self, request, **kw):
        if isinstance(request, GetTimestamp) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetTimestampResponse.typecode.ofwhat, pyclass=GetTimestampResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetCRL
    def GetCRL(self, request, **kw):
        if isinstance(request, GetCRL) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetCRLResponse.typecode.ofwhat, pyclass=GetCRLResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetSignatureModules
    def GetSignatureModules(self, request, **kw):
        if isinstance(request, GetSignatureModules) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetSignatureModulesResponse.typecode.ofwhat, pyclass=GetSignatureModulesResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: PrepareSignature
    def PrepareSignature(self, request, **kw):
        if isinstance(request, PrepareSignature) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=PrepareSignatureResponse.typecode.ofwhat, pyclass=PrepareSignatureResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: FinalizeSignature
    def FinalizeSignature(self, request, **kw):
        if isinstance(request, FinalizeSignature) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=FinalizeSignatureResponse.typecode.ofwhat, pyclass=FinalizeSignatureResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: RemoveSignature
    def RemoveSignature(self, request, **kw):
        if isinstance(request, RemoveSignature) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=RemoveSignatureResponse.typecode.ofwhat, pyclass=RemoveSignatureResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetVersion
    def GetVersion(self, request, **kw):
        if isinstance(request, GetVersion) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetVersionResponse.typecode.ofwhat, pyclass=GetVersionResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: MobileSign
    def MobileSign(self, request, **kw):
        if isinstance(request, MobileSign) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=MobileSignResponse.typecode.ofwhat, pyclass=MobileSignResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetStatusInfo
    def GetStatusInfo(self, request, **kw):
        if isinstance(request, GetStatusInfo) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetStatusInfoResponse.typecode.ofwhat, pyclass=GetStatusInfoResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: MobileAuthenticate
    def MobileAuthenticate(self, request, **kw):
        if isinstance(request, MobileAuthenticate) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=MobileAuthenticateResponse.typecode.ofwhat, pyclass=MobileAuthenticateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetMobileAuthenticateStatus
    def GetMobileAuthenticateStatus(self, request, **kw):
        if isinstance(request, GetMobileAuthenticateStatus) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetMobileAuthenticateStatusResponse.typecode.ofwhat, pyclass=GetMobileAuthenticateStatusResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: MobileCreateSignature
    def MobileCreateSignature(self, request, **kw):
        if isinstance(request, MobileCreateSignature) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=MobileCreateSignatureResponse.typecode.ofwhat, pyclass=MobileCreateSignatureResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetMobileCreateSignatureStatus
    def GetMobileCreateSignatureStatus(self, request, **kw):
        if isinstance(request, GetMobileCreateSignatureStatus) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetMobileCreateSignatureStatusResponse.typecode.ofwhat, pyclass=GetMobileCreateSignatureStatusResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: GetMobileCertificate
    def GetMobileCertificate(self, request, **kw):
        if isinstance(request, GetMobileCertificate) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=GetMobileCertificateResponse.typecode.ofwhat, pyclass=GetMobileCertificateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: CheckCertificate
    def CheckCertificate(self, request, **kw):
        if isinstance(request, CheckCertificate) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=CheckCertificateResponse.typecode.ofwhat, pyclass=CheckCertificateResponse.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

_StartSessionTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","StartSession"), ofwhat=[ZSI.TC.String(pname="SigningProfile", aname="_SigningProfile", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SigDocXML", aname="_SigDocXML", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="bHoldSession", aname="_bHoldSession", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.DataFileData_Def(pname="datafile", aname="_datafile", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class StartSession:
    typecode = _StartSessionTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        SigningProfile -- part SigningProfile
        SigDocXML -- part SigDocXML
        bHoldSession -- part bHoldSession
        datafile -- part datafile
        """
        self._SigningProfile =  kw.get("SigningProfile")
        self._SigDocXML =  kw.get("SigDocXML")
        self._bHoldSession =  kw.get("bHoldSession")
        self._datafile =  kw.get("datafile")
StartSession.typecode.pyclass = StartSession

_StartSessionResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","StartSessionResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.SignedDocInfo_Def(pname="SignedDocInfo", aname="_SignedDocInfo", typed=False,
    encoded=None, minOccurs=0, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class StartSessionResponse:
    typecode = _StartSessionResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        Sesscode -- part Sesscode
        SignedDocInfo -- part SignedDocInfo
        """
        self._Status =  kw.get("Status")
        self._Sesscode =  kw.get("Sesscode")
        self._SignedDocInfo =  kw.get("SignedDocInfo")
StartSessionResponse.typecode.pyclass = StartSessionResponse

_CloseSessionTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","CloseSession"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class CloseSession:
    typecode = _CloseSessionTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        """
        self._Sesscode =  kw.get("Sesscode")
CloseSession.typecode.pyclass = CloseSession

_CloseSessionResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","CloseSessionResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class CloseSessionResponse:
    typecode = _CloseSessionResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        """
        self._Status =  kw.get("Status")
CloseSessionResponse.typecode.pyclass = CloseSessionResponse

_CreateSignedDocTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","CreateSignedDoc"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Format", aname="_Format", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Version", aname="_Version", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class CreateSignedDoc:
    typecode = _CreateSignedDocTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        Format -- part Format
        Version -- part Version
        """
        self._Sesscode =  kw.get("Sesscode")
        self._Format =  kw.get("Format")
        self._Version =  kw.get("Version")
CreateSignedDoc.typecode.pyclass = CreateSignedDoc

_CreateSignedDocResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","CreateSignedDocResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.SignedDocInfo_Def(pname="SignedDocInfo", aname="_SignedDocInfo", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class CreateSignedDocResponse:
    typecode = _CreateSignedDocResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        SignedDocInfo -- part SignedDocInfo
        """
        self._Status =  kw.get("Status")
        self._SignedDocInfo =  kw.get("SignedDocInfo")
CreateSignedDocResponse.typecode.pyclass = CreateSignedDocResponse

_AddDataFileTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","AddDataFile"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="FileName", aname="_FileName", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="MimeType", aname="_MimeType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ContentType", aname="_ContentType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="Size", aname="_Size", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="DigestType", aname="_DigestType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="DigestValue", aname="_DigestValue", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Content", aname="_Content", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class AddDataFile:
    typecode = _AddDataFileTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        FileName -- part FileName
        MimeType -- part MimeType
        ContentType -- part ContentType
        Size -- part Size
        DigestType -- part DigestType
        DigestValue -- part DigestValue
        Content -- part Content
        """
        self._Sesscode =  kw.get("Sesscode")
        self._FileName =  kw.get("FileName")
        self._MimeType =  kw.get("MimeType")
        self._ContentType =  kw.get("ContentType")
        self._Size =  kw.get("Size")
        self._DigestType =  kw.get("DigestType")
        self._DigestValue =  kw.get("DigestValue")
        self._Content =  kw.get("Content")
AddDataFile.typecode.pyclass = AddDataFile

_AddDataFileResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","AddDataFileResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.SignedDocInfo_Def(pname="SignedDocInfo", aname="_SignedDocInfo", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class AddDataFileResponse:
    typecode = _AddDataFileResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        SignedDocInfo -- part SignedDocInfo
        """
        self._Status =  kw.get("Status")
        self._SignedDocInfo =  kw.get("SignedDocInfo")
AddDataFileResponse.typecode.pyclass = AddDataFileResponse

_RemoveDataFileTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","RemoveDataFile"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="DataFileId", aname="_DataFileId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class RemoveDataFile:
    typecode = _RemoveDataFileTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        DataFileId -- part DataFileId
        """
        self._Sesscode =  kw.get("Sesscode")
        self._DataFileId =  kw.get("DataFileId")
RemoveDataFile.typecode.pyclass = RemoveDataFile

_RemoveDataFileResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","RemoveDataFileResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.SignedDocInfo_Def(pname="SignedDocInfo", aname="_SignedDocInfo", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class RemoveDataFileResponse:
    typecode = _RemoveDataFileResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        SignedDocInfo -- part SignedDocInfo
        """
        self._Status =  kw.get("Status")
        self._SignedDocInfo =  kw.get("SignedDocInfo")
RemoveDataFileResponse.typecode.pyclass = RemoveDataFileResponse

_GetSignedDocTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetSignedDoc"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetSignedDoc:
    typecode = _GetSignedDocTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        """
        self._Sesscode =  kw.get("Sesscode")
GetSignedDoc.typecode.pyclass = GetSignedDoc

_GetSignedDocResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetSignedDocResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignedDocData", aname="_SignedDocData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetSignedDocResponse:
    typecode = _GetSignedDocResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        SignedDocData -- part SignedDocData
        """
        self._Status =  kw.get("Status")
        self._SignedDocData =  kw.get("SignedDocData")
GetSignedDocResponse.typecode.pyclass = GetSignedDocResponse

_GetSignedDocInfoTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetSignedDocInfo"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetSignedDocInfo:
    typecode = _GetSignedDocInfoTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        """
        self._Sesscode =  kw.get("Sesscode")
GetSignedDocInfo.typecode.pyclass = GetSignedDocInfo

_GetSignedDocInfoResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetSignedDocInfoResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.SignedDocInfo_Def(pname="SignedDocInfo", aname="_SignedDocInfo", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetSignedDocInfoResponse:
    typecode = _GetSignedDocInfoResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        SignedDocInfo -- part SignedDocInfo
        """
        self._Status =  kw.get("Status")
        self._SignedDocInfo =  kw.get("SignedDocInfo")
GetSignedDocInfoResponse.typecode.pyclass = GetSignedDocInfoResponse

_GetDataFileTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetDataFile"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="DataFileId", aname="_DataFileId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetDataFile:
    typecode = _GetDataFileTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        DataFileId -- part DataFileId
        """
        self._Sesscode =  kw.get("Sesscode")
        self._DataFileId =  kw.get("DataFileId")
GetDataFile.typecode.pyclass = GetDataFile

_GetDataFileResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetDataFileResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.DataFileData_Def(pname="DataFileData", aname="_DataFileData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetDataFileResponse:
    typecode = _GetDataFileResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        DataFileData -- part DataFileData
        """
        self._Status =  kw.get("Status")
        self._DataFileData =  kw.get("DataFileData")
GetDataFileResponse.typecode.pyclass = GetDataFileResponse

_GetSignersCertificateTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetSignersCertificate"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignatureId", aname="_SignatureId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetSignersCertificate:
    typecode = _GetSignersCertificateTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        SignatureId -- part SignatureId
        """
        self._Sesscode =  kw.get("Sesscode")
        self._SignatureId =  kw.get("SignatureId")
GetSignersCertificate.typecode.pyclass = GetSignersCertificate

_GetSignersCertificateResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetSignersCertificateResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="CertificateData", aname="_CertificateData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetSignersCertificateResponse:
    typecode = _GetSignersCertificateResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        CertificateData -- part CertificateData
        """
        self._Status =  kw.get("Status")
        self._CertificateData =  kw.get("CertificateData")
GetSignersCertificateResponse.typecode.pyclass = GetSignersCertificateResponse

_GetNotarysCertificateTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetNotarysCertificate"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignatureId", aname="_SignatureId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetNotarysCertificate:
    typecode = _GetNotarysCertificateTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        SignatureId -- part SignatureId
        """
        self._Sesscode =  kw.get("Sesscode")
        self._SignatureId =  kw.get("SignatureId")
GetNotarysCertificate.typecode.pyclass = GetNotarysCertificate

_GetNotarysCertificateResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetNotarysCertificateResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="CertificateData", aname="_CertificateData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetNotarysCertificateResponse:
    typecode = _GetNotarysCertificateResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        CertificateData -- part CertificateData
        """
        self._Status =  kw.get("Status")
        self._CertificateData =  kw.get("CertificateData")
GetNotarysCertificateResponse.typecode.pyclass = GetNotarysCertificateResponse

_GetNotaryTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetNotary"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignatureId", aname="_SignatureId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetNotary:
    typecode = _GetNotaryTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        SignatureId -- part SignatureId
        """
        self._Sesscode =  kw.get("Sesscode")
        self._SignatureId =  kw.get("SignatureId")
GetNotary.typecode.pyclass = GetNotary

_GetNotaryResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetNotaryResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="OcspData", aname="_OcspData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetNotaryResponse:
    typecode = _GetNotaryResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        OcspData -- part OcspData
        """
        self._Status =  kw.get("Status")
        self._OcspData =  kw.get("OcspData")
GetNotaryResponse.typecode.pyclass = GetNotaryResponse

_GetTSACertificateTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetTSACertificate"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="TimestampId", aname="_TimestampId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetTSACertificate:
    typecode = _GetTSACertificateTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        TimestampId -- part TimestampId
        """
        self._Sesscode =  kw.get("Sesscode")
        self._TimestampId =  kw.get("TimestampId")
GetTSACertificate.typecode.pyclass = GetTSACertificate

_GetTSACertificateResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetTSACertificateResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="CertificateData", aname="_CertificateData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetTSACertificateResponse:
    typecode = _GetTSACertificateResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        CertificateData -- part CertificateData
        """
        self._Status =  kw.get("Status")
        self._CertificateData =  kw.get("CertificateData")
GetTSACertificateResponse.typecode.pyclass = GetTSACertificateResponse

_GetTimestampTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetTimestamp"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="TimestampId", aname="_TimestampId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetTimestamp:
    typecode = _GetTimestampTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        TimestampId -- part TimestampId
        """
        self._Sesscode =  kw.get("Sesscode")
        self._TimestampId =  kw.get("TimestampId")
GetTimestamp.typecode.pyclass = GetTimestamp

_GetTimestampResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetTimestampResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="TimestampData", aname="_TimestampData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetTimestampResponse:
    typecode = _GetTimestampResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        TimestampData -- part TimestampData
        """
        self._Status =  kw.get("Status")
        self._TimestampData =  kw.get("TimestampData")
GetTimestampResponse.typecode.pyclass = GetTimestampResponse

_GetCRLTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetCRL"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignatureId", aname="_SignatureId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetCRL:
    typecode = _GetCRLTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        SignatureId -- part SignatureId
        """
        self._Sesscode =  kw.get("Sesscode")
        self._SignatureId =  kw.get("SignatureId")
GetCRL.typecode.pyclass = GetCRL

_GetCRLResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetCRLResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="CRLData", aname="_CRLData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetCRLResponse:
    typecode = _GetCRLResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        CRLData -- part CRLData
        """
        self._Status =  kw.get("Status")
        self._CRLData =  kw.get("CRLData")
GetCRLResponse.typecode.pyclass = GetCRLResponse

_GetSignatureModulesTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetSignatureModules"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Platform", aname="_Platform", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Phase", aname="_Phase", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Type", aname="_Type", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetSignatureModules:
    typecode = _GetSignatureModulesTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        Platform -- part Platform
        Phase -- part Phase
        Type -- part Type
        """
        self._Sesscode =  kw.get("Sesscode")
        self._Platform =  kw.get("Platform")
        self._Phase =  kw.get("Phase")
        self._Type =  kw.get("Type")
GetSignatureModules.typecode.pyclass = GetSignatureModules

_GetSignatureModulesResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetSignatureModulesResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.SignatureModulesArray_Def(pname="Modules", aname="_Modules", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetSignatureModulesResponse:
    typecode = _GetSignatureModulesResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        Modules -- part Modules
        """
        self._Status =  kw.get("Status")
        self._Modules =  kw.get("Modules")
GetSignatureModulesResponse.typecode.pyclass = GetSignatureModulesResponse

_PrepareSignatureTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","PrepareSignature"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignersCertificate", aname="_SignersCertificate", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignersTokenId", aname="_SignersTokenId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Role", aname="_Role", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="City", aname="_City", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="State", aname="_State", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="PostalCode", aname="_PostalCode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Country", aname="_Country", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SigningProfile", aname="_SigningProfile", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class PrepareSignature:
    typecode = _PrepareSignatureTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        SignersCertificate -- part SignersCertificate
        SignersTokenId -- part SignersTokenId
        Role -- part Role
        City -- part City
        State -- part State
        PostalCode -- part PostalCode
        Country -- part Country
        SigningProfile -- part SigningProfile
        """
        self._Sesscode =  kw.get("Sesscode")
        self._SignersCertificate =  kw.get("SignersCertificate")
        self._SignersTokenId =  kw.get("SignersTokenId")
        self._Role =  kw.get("Role")
        self._City =  kw.get("City")
        self._State =  kw.get("State")
        self._PostalCode =  kw.get("PostalCode")
        self._Country =  kw.get("Country")
        self._SigningProfile =  kw.get("SigningProfile")
PrepareSignature.typecode.pyclass = PrepareSignature

_PrepareSignatureResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","PrepareSignatureResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignatureId", aname="_SignatureId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignedInfoDigest", aname="_SignedInfoDigest", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class PrepareSignatureResponse:
    typecode = _PrepareSignatureResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        SignatureId -- part SignatureId
        SignedInfoDigest -- part SignedInfoDigest
        """
        self._Status =  kw.get("Status")
        self._SignatureId =  kw.get("SignatureId")
        self._SignedInfoDigest =  kw.get("SignedInfoDigest")
PrepareSignatureResponse.typecode.pyclass = PrepareSignatureResponse

_FinalizeSignatureTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","FinalizeSignature"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignatureId", aname="_SignatureId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignatureValue", aname="_SignatureValue", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class FinalizeSignature:
    typecode = _FinalizeSignatureTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        SignatureId -- part SignatureId
        SignatureValue -- part SignatureValue
        """
        self._Sesscode =  kw.get("Sesscode")
        self._SignatureId =  kw.get("SignatureId")
        self._SignatureValue =  kw.get("SignatureValue")
FinalizeSignature.typecode.pyclass = FinalizeSignature

_FinalizeSignatureResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","FinalizeSignatureResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.SignedDocInfo_Def(pname="SignedDocInfo", aname="_SignedDocInfo", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class FinalizeSignatureResponse:
    typecode = _FinalizeSignatureResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        SignedDocInfo -- part SignedDocInfo
        """
        self._Status =  kw.get("Status")
        self._SignedDocInfo =  kw.get("SignedDocInfo")
FinalizeSignatureResponse.typecode.pyclass = FinalizeSignatureResponse

_RemoveSignatureTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","RemoveSignature"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignatureId", aname="_SignatureId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class RemoveSignature:
    typecode = _RemoveSignatureTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        SignatureId -- part SignatureId
        """
        self._Sesscode =  kw.get("Sesscode")
        self._SignatureId =  kw.get("SignatureId")
RemoveSignature.typecode.pyclass = RemoveSignature

_RemoveSignatureResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","RemoveSignatureResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.SignedDocInfo_Def(pname="SignedDocInfo", aname="_SignedDocInfo", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class RemoveSignatureResponse:
    typecode = _RemoveSignatureResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        SignedDocInfo -- part SignedDocInfo
        """
        self._Status =  kw.get("Status")
        self._SignedDocInfo =  kw.get("SignedDocInfo")
RemoveSignatureResponse.typecode.pyclass = RemoveSignatureResponse

_GetVersionTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetVersion"), ofwhat=[], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetVersion:
    typecode = _GetVersionTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        """
GetVersion.typecode.pyclass = GetVersion

_GetVersionResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetVersionResponse"), ofwhat=[ZSI.TC.String(pname="Name", aname="_Name", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Version", aname="_Version", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="LibraryVersion", aname="_LibraryVersion", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetVersionResponse:
    typecode = _GetVersionResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Name -- part Name
        Version -- part Version
        LibraryVersion -- part LibraryVersion
        """
        self._Name =  kw.get("Name")
        self._Version =  kw.get("Version")
        self._LibraryVersion =  kw.get("LibraryVersion")
GetVersionResponse.typecode.pyclass = GetVersionResponse

_MobileSignTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","MobileSign"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignerIDCode", aname="_SignerIDCode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignersCountry", aname="_SignersCountry", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignerPhoneNo", aname="_SignerPhoneNo", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ServiceName", aname="_ServiceName", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="AdditionalDataToBeDisplayed", aname="_AdditionalDataToBeDisplayed", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Language", aname="_Language", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Role", aname="_Role", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="City", aname="_City", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="StateOrProvince", aname="_StateOrProvince", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="PostalCode", aname="_PostalCode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="CountryName", aname="_CountryName", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SigningProfile", aname="_SigningProfile", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="MessagingMode", aname="_MessagingMode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="AsyncConfiguration", aname="_AsyncConfiguration", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="ReturnDocInfo", aname="_ReturnDocInfo", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="ReturnDocData", aname="_ReturnDocData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class MobileSign:
    typecode = _MobileSignTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        SignerIDCode -- part SignerIDCode
        SignersCountry -- part SignersCountry
        SignerPhoneNo -- part SignerPhoneNo
        ServiceName -- part ServiceName
        AdditionalDataToBeDisplayed -- part AdditionalDataToBeDisplayed
        Language -- part Language
        Role -- part Role
        City -- part City
        StateOrProvince -- part StateOrProvince
        PostalCode -- part PostalCode
        CountryName -- part CountryName
        SigningProfile -- part SigningProfile
        MessagingMode -- part MessagingMode
        AsyncConfiguration -- part AsyncConfiguration
        ReturnDocInfo -- part ReturnDocInfo
        ReturnDocData -- part ReturnDocData
        """
        self._Sesscode =  kw.get("Sesscode")
        self._SignerIDCode =  kw.get("SignerIDCode")
        self._SignersCountry =  kw.get("SignersCountry")
        self._SignerPhoneNo =  kw.get("SignerPhoneNo")
        self._ServiceName =  kw.get("ServiceName")
        self._AdditionalDataToBeDisplayed =  kw.get("AdditionalDataToBeDisplayed")
        self._Language =  kw.get("Language")
        self._Role =  kw.get("Role")
        self._City =  kw.get("City")
        self._StateOrProvince =  kw.get("StateOrProvince")
        self._PostalCode =  kw.get("PostalCode")
        self._CountryName =  kw.get("CountryName")
        self._SigningProfile =  kw.get("SigningProfile")
        self._MessagingMode =  kw.get("MessagingMode")
        self._AsyncConfiguration =  kw.get("AsyncConfiguration")
        self._ReturnDocInfo =  kw.get("ReturnDocInfo")
        self._ReturnDocData =  kw.get("ReturnDocData")
MobileSign.typecode.pyclass = MobileSign

_MobileSignResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","MobileSignResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="StatusCode", aname="_StatusCode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ChallengeID", aname="_ChallengeID", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class MobileSignResponse:
    typecode = _MobileSignResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        StatusCode -- part StatusCode
        ChallengeID -- part ChallengeID
        """
        self._Status =  kw.get("Status")
        self._StatusCode =  kw.get("StatusCode")
        self._ChallengeID =  kw.get("ChallengeID")
MobileSignResponse.typecode.pyclass = MobileSignResponse

_GetStatusInfoTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetStatusInfo"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="ReturnDocInfo", aname="_ReturnDocInfo", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="WaitSignature", aname="_WaitSignature", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetStatusInfo:
    typecode = _GetStatusInfoTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        ReturnDocInfo -- part ReturnDocInfo
        WaitSignature -- part WaitSignature
        """
        self._Sesscode =  kw.get("Sesscode")
        self._ReturnDocInfo =  kw.get("ReturnDocInfo")
        self._WaitSignature =  kw.get("WaitSignature")
GetStatusInfo.typecode.pyclass = GetStatusInfo

_GetStatusInfoResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetStatusInfoResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="StatusCode", aname="_StatusCode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.SignedDocInfo_Def(pname="SignedDocInfo", aname="_SignedDocInfo", typed=False,
    encoded=None, minOccurs=0, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetStatusInfoResponse:
    typecode = _GetStatusInfoResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        StatusCode -- part StatusCode
        SignedDocInfo -- part SignedDocInfo
        """
        self._Status =  kw.get("Status")
        self._StatusCode =  kw.get("StatusCode")
        self._SignedDocInfo =  kw.get("SignedDocInfo")
GetStatusInfoResponse.typecode.pyclass = GetStatusInfoResponse

_MobileAuthenticateTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","MobileAuthenticate"), ofwhat=[ZSI.TC.String(pname="IDCode", aname="_IDCode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="CountryCode", aname="_CountryCode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="PhoneNo", aname="_PhoneNo", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Language", aname="_Language", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ServiceName", aname="_ServiceName", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="MessageToDisplay", aname="_MessageToDisplay", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SPChallenge", aname="_SPChallenge", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="MessagingMode", aname="_MessagingMode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="AsyncConfiguration", aname="_AsyncConfiguration", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="ReturnCertData", aname="_ReturnCertData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="ReturnRevocationData", aname="_ReturnRevocationData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class MobileAuthenticate:
    typecode = _MobileAuthenticateTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        IDCode -- part IDCode
        CountryCode -- part CountryCode
        PhoneNo -- part PhoneNo
        Language -- part Language
        ServiceName -- part ServiceName
        MessageToDisplay -- part MessageToDisplay
        SPChallenge -- part SPChallenge
        MessagingMode -- part MessagingMode
        AsyncConfiguration -- part AsyncConfiguration
        ReturnCertData -- part ReturnCertData
        ReturnRevocationData -- part ReturnRevocationData
        """
        self._IDCode =  kw.get("IDCode")
        self._CountryCode =  kw.get("CountryCode")
        self._PhoneNo =  kw.get("PhoneNo")
        self._Language =  kw.get("Language")
        self._ServiceName =  kw.get("ServiceName")
        self._MessageToDisplay =  kw.get("MessageToDisplay")
        self._SPChallenge =  kw.get("SPChallenge")
        self._MessagingMode =  kw.get("MessagingMode")
        self._AsyncConfiguration =  kw.get("AsyncConfiguration")
        self._ReturnCertData =  kw.get("ReturnCertData")
        self._ReturnRevocationData =  kw.get("ReturnRevocationData")
MobileAuthenticate.typecode.pyclass = MobileAuthenticate

_MobileAuthenticateResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","MobileAuthenticateResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="UserIDCode", aname="_UserIDCode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="UserGivenname", aname="_UserGivenname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="UserSurname", aname="_UserSurname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="UserCountry", aname="_UserCountry", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="UserCN", aname="_UserCN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="CertificateData", aname="_CertificateData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ChallengeID", aname="_ChallengeID", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Challenge", aname="_Challenge", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="RevocationData", aname="_RevocationData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class MobileAuthenticateResponse:
    typecode = _MobileAuthenticateResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        Status -- part Status
        UserIDCode -- part UserIDCode
        UserGivenname -- part UserGivenname
        UserSurname -- part UserSurname
        UserCountry -- part UserCountry
        UserCN -- part UserCN
        CertificateData -- part CertificateData
        ChallengeID -- part ChallengeID
        Challenge -- part Challenge
        RevocationData -- part RevocationData
        """
        self._Sesscode =  kw.get("Sesscode")
        self._Status =  kw.get("Status")
        self._UserIDCode =  kw.get("UserIDCode")
        self._UserGivenname =  kw.get("UserGivenname")
        self._UserSurname =  kw.get("UserSurname")
        self._UserCountry =  kw.get("UserCountry")
        self._UserCN =  kw.get("UserCN")
        self._CertificateData =  kw.get("CertificateData")
        self._ChallengeID =  kw.get("ChallengeID")
        self._Challenge =  kw.get("Challenge")
        self._RevocationData =  kw.get("RevocationData")
MobileAuthenticateResponse.typecode.pyclass = MobileAuthenticateResponse

_GetMobileAuthenticateStatusTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetMobileAuthenticateStatus"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="WaitSignature", aname="_WaitSignature", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetMobileAuthenticateStatus:
    typecode = _GetMobileAuthenticateStatusTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        WaitSignature -- part WaitSignature
        """
        self._Sesscode =  kw.get("Sesscode")
        self._WaitSignature =  kw.get("WaitSignature")
GetMobileAuthenticateStatus.typecode.pyclass = GetMobileAuthenticateStatus

_GetMobileAuthenticateStatusResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetMobileAuthenticateStatusResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Signature", aname="_Signature", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetMobileAuthenticateStatusResponse:
    typecode = _GetMobileAuthenticateStatusResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        Signature -- part Signature
        """
        self._Status =  kw.get("Status")
        self._Signature =  kw.get("Signature")
GetMobileAuthenticateStatusResponse.typecode.pyclass = GetMobileAuthenticateStatusResponse

_MobileCreateSignatureTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","MobileCreateSignature"), ofwhat=[ZSI.TC.String(pname="IDCode", aname="_IDCode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignersCountry", aname="_SignersCountry", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="PhoneNo", aname="_PhoneNo", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Language", aname="_Language", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ServiceName", aname="_ServiceName", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="MessageToDisplay", aname="_MessageToDisplay", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Role", aname="_Role", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="City", aname="_City", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="StateOrProvince", aname="_StateOrProvince", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="PostalCode", aname="_PostalCode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="CountryName", aname="_CountryName", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SigningProfile", aname="_SigningProfile", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.DataFileDigestList_Def(pname="DataFiles", aname="_DataFiles", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Format", aname="_Format", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Version", aname="_Version", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignatureID", aname="_SignatureID", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="MessagingMode", aname="_MessagingMode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="AsyncConfiguration", aname="_AsyncConfiguration", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class MobileCreateSignature:
    typecode = _MobileCreateSignatureTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        IDCode -- part IDCode
        SignersCountry -- part SignersCountry
        PhoneNo -- part PhoneNo
        Language -- part Language
        ServiceName -- part ServiceName
        MessageToDisplay -- part MessageToDisplay
        Role -- part Role
        City -- part City
        StateOrProvince -- part StateOrProvince
        PostalCode -- part PostalCode
        CountryName -- part CountryName
        SigningProfile -- part SigningProfile
        DataFiles -- part DataFiles
        Format -- part Format
        Version -- part Version
        SignatureID -- part SignatureID
        MessagingMode -- part MessagingMode
        AsyncConfiguration -- part AsyncConfiguration
        """
        self._IDCode =  kw.get("IDCode")
        self._SignersCountry =  kw.get("SignersCountry")
        self._PhoneNo =  kw.get("PhoneNo")
        self._Language =  kw.get("Language")
        self._ServiceName =  kw.get("ServiceName")
        self._MessageToDisplay =  kw.get("MessageToDisplay")
        self._Role =  kw.get("Role")
        self._City =  kw.get("City")
        self._StateOrProvince =  kw.get("StateOrProvince")
        self._PostalCode =  kw.get("PostalCode")
        self._CountryName =  kw.get("CountryName")
        self._SigningProfile =  kw.get("SigningProfile")
        self._DataFiles =  kw.get("DataFiles")
        self._Format =  kw.get("Format")
        self._Version =  kw.get("Version")
        self._SignatureID =  kw.get("SignatureID")
        self._MessagingMode =  kw.get("MessagingMode")
        self._AsyncConfiguration =  kw.get("AsyncConfiguration")
MobileCreateSignature.typecode.pyclass = MobileCreateSignature

_MobileCreateSignatureResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","MobileCreateSignatureResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ChallengeID", aname="_ChallengeID", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class MobileCreateSignatureResponse:
    typecode = _MobileCreateSignatureResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        ChallengeID -- part ChallengeID
        Status -- part Status
        """
        self._Sesscode =  kw.get("Sesscode")
        self._ChallengeID =  kw.get("ChallengeID")
        self._Status =  kw.get("Status")
MobileCreateSignatureResponse.typecode.pyclass = MobileCreateSignatureResponse

_GetMobileCreateSignatureStatusTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetMobileCreateSignatureStatus"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="WaitSignature", aname="_WaitSignature", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetMobileCreateSignatureStatus:
    typecode = _GetMobileCreateSignatureStatusTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        WaitSignature -- part WaitSignature
        """
        self._Sesscode =  kw.get("Sesscode")
        self._WaitSignature =  kw.get("WaitSignature")
GetMobileCreateSignatureStatus.typecode.pyclass = GetMobileCreateSignatureStatus

_GetMobileCreateSignatureStatusResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetMobileCreateSignatureStatusResponse"), ofwhat=[ZSI.TCnumbers.Iint(pname="Sesscode", aname="_Sesscode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Signature", aname="_Signature", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetMobileCreateSignatureStatusResponse:
    typecode = _GetMobileCreateSignatureStatusResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Sesscode -- part Sesscode
        Status -- part Status
        Signature -- part Signature
        """
        self._Sesscode =  kw.get("Sesscode")
        self._Status =  kw.get("Status")
        self._Signature =  kw.get("Signature")
GetMobileCreateSignatureStatusResponse.typecode.pyclass = GetMobileCreateSignatureStatusResponse

_GetMobileCertificateTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetMobileCertificate"), ofwhat=[ZSI.TC.String(pname="IDCode", aname="_IDCode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="Country", aname="_Country", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="PhoneNo", aname="_PhoneNo", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="ReturnCertData", aname="_ReturnCertData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetMobileCertificate:
    typecode = _GetMobileCertificateTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        IDCode -- part IDCode
        Country -- part Country
        PhoneNo -- part PhoneNo
        ReturnCertData -- part ReturnCertData
        """
        self._IDCode =  kw.get("IDCode")
        self._Country =  kw.get("Country")
        self._PhoneNo =  kw.get("PhoneNo")
        self._ReturnCertData =  kw.get("ReturnCertData")
GetMobileCertificate.typecode.pyclass = GetMobileCertificate

_GetMobileCertificateResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","GetMobileCertificateResponse"), ofwhat=[ZSI.TC.String(pname="AuthCertStatus", aname="_AuthCertStatus", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignCertStatus", aname="_SignCertStatus", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="AuthCertData", aname="_AuthCertData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="SignCertData", aname="_SignCertData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class GetMobileCertificateResponse:
    typecode = _GetMobileCertificateResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        AuthCertStatus -- part AuthCertStatus
        SignCertStatus -- part SignCertStatus
        AuthCertData -- part AuthCertData
        SignCertData -- part SignCertData
        """
        self._AuthCertStatus =  kw.get("AuthCertStatus")
        self._SignCertStatus =  kw.get("SignCertStatus")
        self._AuthCertData =  kw.get("AuthCertData")
        self._SignCertData =  kw.get("SignCertData")
GetMobileCertificateResponse.typecode.pyclass = GetMobileCertificateResponse

_CheckCertificateTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","CheckCertificate"), ofwhat=[ZSI.TC.String(pname="Certificate", aname="_Certificate", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="ReturnRevocationData", aname="_ReturnRevocationData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class CheckCertificate:
    typecode = _CheckCertificateTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Certificate -- part Certificate
        ReturnRevocationData -- part ReturnRevocationData
        """
        self._Certificate =  kw.get("Certificate")
        self._ReturnRevocationData =  kw.get("ReturnRevocationData")
CheckCertificate.typecode.pyclass = CheckCertificate

_CheckCertificateResponseTypecode = Struct(pname=("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","CheckCertificateResponse"), ofwhat=[ZSI.TC.String(pname="Status", aname="_Status", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="UserIDCode", aname="_UserIDCode", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="UserGivenname", aname="_UserGivenname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="UserSurname", aname="_UserSurname", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="UserCountry", aname="_UserCountry", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="UserOrganisation", aname="_UserOrganisation", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="UserCN", aname="_UserCN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="IssuerCN", aname="_IssuerCN", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="KeyUsage", aname="_KeyUsage", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="EnhancedKeyUsage", aname="_EnhancedKeyUsage", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="RevocationData", aname="_RevocationData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl")
class CheckCertificateResponse:
    typecode = _CheckCertificateResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        Status -- part Status
        UserIDCode -- part UserIDCode
        UserGivenname -- part UserGivenname
        UserSurname -- part UserSurname
        UserCountry -- part UserCountry
        UserOrganisation -- part UserOrganisation
        UserCN -- part UserCN
        IssuerCN -- part IssuerCN
        KeyUsage -- part KeyUsage
        EnhancedKeyUsage -- part EnhancedKeyUsage
        RevocationData -- part RevocationData
        """
        self._Status =  kw.get("Status")
        self._UserIDCode =  kw.get("UserIDCode")
        self._UserGivenname =  kw.get("UserGivenname")
        self._UserSurname =  kw.get("UserSurname")
        self._UserCountry =  kw.get("UserCountry")
        self._UserOrganisation =  kw.get("UserOrganisation")
        self._UserCN =  kw.get("UserCN")
        self._IssuerCN =  kw.get("IssuerCN")
        self._KeyUsage =  kw.get("KeyUsage")
        self._EnhancedKeyUsage =  kw.get("EnhancedKeyUsage")
        self._RevocationData =  kw.get("RevocationData")
CheckCertificateResponse.typecode.pyclass = CheckCertificateResponse
