##################################################
# file: DigiDocService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py --complexType https://www.openxades.org:9443/?wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://www.sk.ee:8098/MSSP_GW/MSSP_GW.wsdl
##############################

class ns1:
    targetNamespace = "http://www.sk.ee:8098/MSSP_GW/MSSP_GW.wsdl"

# end class ns1 (tns: http://www.sk.ee:8098/MSSP_GW/MSSP_GW.wsdl)

##############################
# targetNamespace
# http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl
##############################

class ns0:
    targetNamespace = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"

    class DataFileAttribute_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "DataFileAttribute")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DataFileAttribute_Def.schema
            TClist = [ZSI.TC.String(pname="Name", aname="_Name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Value", aname="_Value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    self._Value = None
                    return
            Holder.__name__ = "DataFileAttribute_Holder"
            self.pyclass = Holder

    class DataFileInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "DataFileInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DataFileInfo_Def.schema
            TClist = [ZSI.TC.String(pname="Id", aname="_Id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Filename", aname="_Filename", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MimeType", aname="_MimeType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ContentType", aname="_ContentType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="Size", aname="_Size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DigestType", aname="_DigestType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DigestValue", aname="_DigestValue", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","DataFileAttribute",lazy=False)(pname="Attributes", aname="_Attributes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Id = None
                    self._Filename = None
                    self._MimeType = None
                    self._ContentType = None
                    self._Size = None
                    self._DigestType = None
                    self._DigestValue = None
                    self._Attributes = []
                    return
            Holder.__name__ = "DataFileInfo_Holder"
            self.pyclass = Holder

    class SignerRole_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "SignerRole")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SignerRole_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="Certified", aname="_Certified", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Role", aname="_Role", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Certified = None
                    self._Role = None
                    return
            Holder.__name__ = "SignerRole_Holder"
            self.pyclass = Holder

    class SignatureProductionPlace_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "SignatureProductionPlace")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SignatureProductionPlace_Def.schema
            TClist = [ZSI.TC.String(pname="City", aname="_City", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="StateOrProvince", aname="_StateOrProvince", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="PostalCode", aname="_PostalCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="CountryName", aname="_CountryName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._City = None
                    self._StateOrProvince = None
                    self._PostalCode = None
                    self._CountryName = None
                    return
            Holder.__name__ = "SignatureProductionPlace_Holder"
            self.pyclass = Holder

    class CertificatePolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "CertificatePolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CertificatePolicy_Def.schema
            TClist = [ZSI.TC.String(pname="OID", aname="_OID", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="URL", aname="_URL", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Description", aname="_Description", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OID = None
                    self._URL = None
                    self._Description = None
                    return
            Holder.__name__ = "CertificatePolicy_Holder"
            self.pyclass = Holder

    class CertificateInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "CertificateInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CertificateInfo_Def.schema
            TClist = [ZSI.TC.String(pname="Issuer", aname="_Issuer", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Subject", aname="_Subject", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="ValidFrom", aname="_ValidFrom", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="ValidTo", aname="_ValidTo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="IssuerSerial", aname="_IssuerSerial", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","CertificatePolicy",lazy=False)(pname="Policies", aname="_Policies", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Issuer = None
                    self._Subject = None
                    self._ValidFrom = None
                    self._ValidTo = None
                    self._IssuerSerial = None
                    self._Policies = []
                    return
            Holder.__name__ = "CertificateInfo_Holder"
            self.pyclass = Holder

    class SignerInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "SignerInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SignerInfo_Def.schema
            TClist = [ZSI.TC.String(pname="CommonName", aname="_CommonName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="IDCode", aname="_IDCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","CertificateInfo",lazy=False)(pname="Certificate", aname="_Certificate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CommonName = None
                    self._IDCode = None
                    self._Certificate = None
                    return
            Holder.__name__ = "SignerInfo_Holder"
            self.pyclass = Holder

    class ConfirmationInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "ConfirmationInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ConfirmationInfo_Def.schema
            TClist = [ZSI.TC.String(pname="ResponderID", aname="_ResponderID", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ProducedAt", aname="_ProducedAt", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","CertificateInfo",lazy=False)(pname="ResponderCertificate", aname="_ResponderCertificate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResponderID = None
                    self._ProducedAt = None
                    self._ResponderCertificate = None
                    return
            Holder.__name__ = "ConfirmationInfo_Holder"
            self.pyclass = Holder

    class TstInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "TstInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TstInfo_Def.schema
            TClist = [ZSI.TC.String(pname="Id", aname="_Id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Type", aname="_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SerialNumber", aname="_SerialNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="CreationTime", aname="_CreationTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Policy", aname="_Policy", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ErrorBound", aname="_ErrorBound", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="Ordered", aname="_Ordered", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="TSA", aname="_TSA", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","CertificateInfo",lazy=False)(pname="Certificate", aname="_Certificate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Id = None
                    self._Type = None
                    self._SerialNumber = None
                    self._CreationTime = None
                    self._Policy = None
                    self._ErrorBound = None
                    self._Ordered = None
                    self._TSA = None
                    self._Certificate = None
                    return
            Holder.__name__ = "TstInfo_Holder"
            self.pyclass = Holder

    class RevokedInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "RevokedInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RevokedInfo_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname="Sequence", aname="_Sequence", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="SerialNumber", aname="_SerialNumber", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="RevocationDate", aname="_RevocationDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Sequence = None
                    self._SerialNumber = None
                    self._RevocationDate = None
                    return
            Holder.__name__ = "RevokedInfo_Holder"
            self.pyclass = Holder

    class CRLInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "CRLInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CRLInfo_Def.schema
            TClist = [ZSI.TC.String(pname="Issuer", aname="_Issuer", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="LastUpdate", aname="_LastUpdate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="NextUpdate", aname="_NextUpdate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","RevokedInfo",lazy=False)(pname="Revocations", aname="_Revocations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Issuer = None
                    self._LastUpdate = None
                    self._NextUpdate = None
                    self._Revocations = []
                    return
            Holder.__name__ = "CRLInfo_Holder"
            self.pyclass = Holder

    class Error_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "Error")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Error_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="Code", aname="_Code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Category", aname="_Category", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Description", aname="_Description", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Code = None
                    self._Category = None
                    self._Description = None
                    return
            Holder.__name__ = "Error_Holder"
            self.pyclass = Holder

    class SignatureInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "SignatureInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SignatureInfo_Def.schema
            TClist = [ZSI.TC.String(pname="Id", aname="_Id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Status", aname="_Status", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","Error",lazy=False)(pname="Error", aname="_Error", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="SigningTime", aname="_SigningTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","SignerRole",lazy=False)(pname="SignerRole", aname="_SignerRole", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","SignatureProductionPlace",lazy=False)(pname="SignatureProductionPlace", aname="_SignatureProductionPlace", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","SignerInfo",lazy=False)(pname="Signer", aname="_Signer", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","ConfirmationInfo",lazy=False)(pname="Confirmation", aname="_Confirmation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","TstInfo",lazy=False)(pname="Timestamps", aname="_Timestamps", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","CRLInfo",lazy=False)(pname="CRLInfo", aname="_CRLInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Id = None
                    self._Status = None
                    self._Error = None
                    self._SigningTime = None
                    self._SignerRole = []
                    self._SignatureProductionPlace = None
                    self._Signer = None
                    self._Confirmation = None
                    self._Timestamps = []
                    self._CRLInfo = None
                    return
            Holder.__name__ = "SignatureInfo_Holder"
            self.pyclass = Holder

    class SignedDocInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "SignedDocInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SignedDocInfo_Def.schema
            TClist = [ZSI.TC.String(pname="Format", aname="_Format", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Version", aname="_Version", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","DataFileInfo",lazy=False)(pname="DataFileInfo", aname="_DataFileInfo", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","SignatureInfo",lazy=False)(pname="SignatureInfo", aname="_SignatureInfo", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Format = None
                    self._Version = None
                    self._DataFileInfo = []
                    self._SignatureInfo = []
                    return
            Holder.__name__ = "SignedDocInfo_Holder"
            self.pyclass = Holder

    class DataFileData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "DataFileData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DataFileData_Def.schema
            TClist = [ZSI.TC.String(pname="Id", aname="_Id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Filename", aname="_Filename", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MimeType", aname="_MimeType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ContentType", aname="_ContentType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DigestType", aname="_DigestType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DigestValue", aname="_DigestValue", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="Size", aname="_Size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","DataFileAttribute",lazy=False)(pname="Attributes", aname="_Attributes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DfData", aname="_DfData", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Id = None
                    self._Filename = None
                    self._MimeType = None
                    self._ContentType = None
                    self._DigestType = None
                    self._DigestValue = None
                    self._Size = None
                    self._Attributes = []
                    self._DfData = None
                    return
            Holder.__name__ = "DataFileData_Holder"
            self.pyclass = Holder

    class SignatureModule_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "SignatureModule")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SignatureModule_Def.schema
            TClist = [ZSI.TC.String(pname="Name", aname="_Name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Type", aname="_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Location", aname="_Location", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ContentType", aname="_ContentType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Content", aname="_Content", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    self._Type = None
                    self._Location = None
                    self._ContentType = None
                    self._Content = None
                    return
            Holder.__name__ = "SignatureModule_Holder"
            self.pyclass = Holder

    class SignatureModulesArray_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "SignatureModulesArray")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SignatureModulesArray_Def.schema
            TClist = [GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","SignatureModule",lazy=False)(pname="Modules", aname="_Modules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Modules = []
                    return
            Holder.__name__ = "SignatureModulesArray_Holder"
            self.pyclass = Holder

    class DataFileDigest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "DataFileDigest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DataFileDigest_Def.schema
            TClist = [ZSI.TC.String(pname="Id", aname="_Id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DigestType", aname="_DigestType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="DigestValue", aname="_DigestValue", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Id = None
                    self._DigestType = None
                    self._DigestValue = None
                    return
            Holder.__name__ = "DataFileDigest_Holder"
            self.pyclass = Holder

    class DataFileDigestList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl"
        type = (schema, "DataFileDigestList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DataFileDigestList_Def.schema
            TClist = [GTD("http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl","DataFileDigest",lazy=False)(pname="DataFileDigest", aname="_DataFileDigest", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._DataFileDigest = []
                    return
            Holder.__name__ = "DataFileDigestList_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://www.sk.ee/DigiDocService/DigiDocService_2_3.wsdl)
