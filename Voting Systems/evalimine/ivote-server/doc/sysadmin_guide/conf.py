# -*- coding: utf-8 -*-
#
# Süsteemiülema juhend documentation build configuration file, created by
# sphinx-quickstart on Mon Nov 24 09:58:52 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import re
#import sys
#import os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.todo',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Süsteemiülema juhend'
copyright = u'2004-2015, Cybernetica AS'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '1.22'
# The full version, including alpha/beta/rc tags.
release = '%s.1' % version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
language = 'et'

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
today_fmt = '%d.%m.%Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build', 'build-deps.rst']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'nature'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
html_short_title = u'Süsteemiülema juhend %s' % release

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%d.%m.%Y %R'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'Systeemiylema_juhend'

html_style = 'custom.css'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    'papersize': 'a4paper',

    # The font size ('10pt', '11pt' or '12pt').
    #'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    'preamble': """
        \hyphenpenalty = 10000
        \def\subsectionautorefname{Jaotis}%
        \def\pageautorefname{lk}%
    """,
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    ('index', 'Systeemiylema_juhend.tex', u'E-valimised. Süsteemiülema juhend',
     u'Cybernetica AS', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
latex_show_pagerefs = True

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'systeemilema_juhend', u'Süsteemiülema juhend',
     [u'Cybernetica AS'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    ('index', 'Systeemiylema_juhend', u'Süsteemiülema juhend',
     u'Cybernetica AS', 'Systeemiylema_juhend',
     'One line description of project.', 'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


# Kohandatud konf

highlight_language = 'shell'


def get_dyn_data():
    params = {}

    # pakkide valmendamise sõltuvused
    control_file = '../../debian/control'
    with open(control_file, 'r') as content_file:
        curr_pkg = None
        while True:
            line = content_file.readline()
            if not line:
                break
            if line.find('Package:') == 0:
                curr_pkg = line[8:].strip()
            if line.find('Depends:') == 0:
                deps = []
                for pkg in line[8:].split(','):
                    if '$' in pkg:
                        continue
                    dep = pkg.strip()
                    dep = re.sub(' \(.+', '', dep)
                    if 'evote-common' not in dep:
                        deps.append(dep)
                deps.sort()
                params[curr_pkg + '-deps'] = deps

    for name in ['evote-hes-deps', 'evote-hts-deps', 'evote-hlr-deps']:
        # evote-common sõltuvuste lisamine koos duplikaatide eemaldamisega
        params[name] = list(set(params[name] + params['evote-common-deps']))
        params[name].sort()  # sortimine
        params[name] = '``' + '``, ``'.join(params[name]) + '``'  # vormindus

    return params

rst_epilog = """
.. |debian-version| replace:: 7.7
.. |hes-deps| replace:: %(evote-hes-deps)s
.. |hts-deps| replace:: %(evote-hts-deps)s
.. |hlr-deps| replace:: %(evote-hlr-deps)s
""" % get_dyn_data()


def mk_dyn_files():
    """
    Andmete lugemine projekti lähtekoodist
    ja nende põhjal RST-failide koostamine.
    """
    import textwrap

    # pakkide valmendamise sõltuvused
    control_file = '../../debian/control'
    with open(control_file, 'r') as content_file:
        while True:
            line = content_file.readline()
            if not line:
                break
            if line.find('Build-Depends:') == 0:
                fout = open('build-deps.rst', 'w')
                fout.write('::\n\n')
                outstr = ('aptitude -R install build-essential ' +
                          line[14:].replace(',', '').strip())
                lines_out = textwrap.wrap(outstr, 70,  break_on_hyphens=False)
                for line_out in lines_out:
                    if line_out != lines_out[-1]:
                        line_out += ' \\'
                    fout.write('  %s' %
                               ('aptitude' in line_out and '>' or ' '))
                    fout.write(' %s\n' % line_out)
                fout.close()


mk_dyn_files()
