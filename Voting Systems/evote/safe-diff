diff --git controllers/default.py controllers/default.py
index 02f0fc1..bce0864 100644
--- controllers/default.py
+++ controllers/default.py
@@ -36,6 +36,7 @@ def edit():
 @auth.requires(auth.user and auth.user.is_manager)
 def start():    
     election = db.election(request.args(0,cast=int)) or redirect(URL('index'))
+    check_closed(election)
     response.subtitle = election.title+T(' / Start')
     demo = ballot2form(election.ballot_model)
     return dict(demo=demo,election=election)
@@ -43,6 +44,7 @@ def start():
 @auth.requires(auth.user and auth.user.is_manager)
 def start_callback():
     election = db.election(request.args(0,cast=int)) or redirect(URL('index'))
+    check_closed(election)
     form = SQLFORM.factory(
         submit_button=T('Email Voters and Start Election Now!'))
     form.element(_type='submit').add_class('btn')
@@ -259,11 +261,18 @@ def email_voter_and_managers(election,voter,ballot,message):
               sender=sender, reply_to=sender)
     return ret
 
+def check_closed(election):
+    if election.closed:
+        session.flash = T('Election already closed')
+        redirect(URL('elections'))
+
+
 @auth.requires(auth.user and auth.user.is_manager)
 def close_election():
     import zipfile, os
     election = db.election(request.args(0,cast=int)) or \
         redirect(URL('invalid_link'))
+    check_closed(election)
     response.subtitle = election.title
     dialog = FORM.confirm(T('Close'),
                           {T('Cancel'):URL('elections')})
@@ -307,6 +316,7 @@ def close_election():
             orderby=db.ballot.ballot_uuid)
         archive.writestr('ballots.csv',str(ballots))
         archive.close()
+        election.update_record(closed=True)
         session.flash = 'Election Closed!'
         redirect(URL('results',args=election.id))
     return dict(dialog=dialog,election=election)
diff --git models/0.py models/0.py
index 0a946a7..d14d18c 100644
--- models/0.py
+++ models/0.py
@@ -2,7 +2,7 @@
 DEVELOPMENT  = False
 DBURI        = 'sqlite://storage.sqlite'
 EMAIL_SENDER = 'i.vote.secure@gmail.com'
-EMAIL_SERVER = 'localhost'
+EMAIL_SERVER = 'logging' # 'localhost'
 EMAIL_LOGIN  = None
 GMAIL_LOGIN  = None
 AS_SERVICE = True
diff --git models/db.py models/db.py
index 0158c93..0730aaf 100644
--- models/db.py
+++ models/db.py
@@ -12,9 +12,11 @@ auth = Auth(db)
 crud, service, plugins = Crud(db), Service(), PluginManager()
 
 ## create all tables needed by auth if not custom tables
+maybe_can_choose = AS_SERVICE or DEVELOPMENT
 auth.settings.extra_fields['auth_user'] = [
-    Field('is_manager','boolean',default=AS_SERVICE or DEVELOPMENT,
-          writable=False,readable=False)]
+    Field('is_manager','boolean',default=False,
+          writable=maybe_can_choose, readable=maybe_can_choose)]
+
 auth.define_tables(username=False, signature=False)
 
 ## configure email
@@ -34,7 +36,7 @@ auth.settings.reset_password_requires_verification = True
 ## register with janrain.com, write your domain:api_key in private/janrain.key
 from gluon.contrib.login_methods.rpx_account import use_janrain
 use_janrain(auth,filename='private/janrain.key')
-auth.settings.actions_disabled.append('profile')
+#auth.settings.actions_disabled.append('profile')
 
 # if resticted to some users
 def load_users_emails(filename=USERS_FILENAME):
diff --git models/db_votes.py models/db_votes.py
index 155b9e2..b2f323f 100644
--- models/db_votes.py
+++ models/db_votes.py
@@ -14,6 +14,7 @@ db.define_table(
     Field('public_key',writable=False,readable=False),                
     Field('private_key',writable=False,readable=False),                
     Field('counters','text',writable=False,readable=False),                
+    Field('closed','boolean',writable=False,readable=False),
     auth.signature,
     format='%(title)s')
 
diff --git modules/ballot.py modules/ballot.py
index ecafbc1..e059dc1 100644
--- modules/ballot.py
+++ modules/ballot.py
@@ -60,6 +60,7 @@ def ballot2form(ballot,readonly=False,counters=None,filled=False):
                          _class='model-'+scheme,
                          _disabled=readonly,
                          ).xml()   
+
     body = regex_field.sub(radio,ballot.replace('\r',''))
     form = FORM(XML(body),not readonly and INPUT(_type='submit', _value="Submit You Ballot!") or '',_class="ballot")
     if not readonly: form.process(formname="ballot")
diff --git static/js/evote.js static/js/evote.js
index 8262eeb..0ee84f8 100644
--- static/js/evote.js
+++ static/js/evote.js
@@ -1,4 +1,4 @@
 var uls=[];
-jQuery('.model-ranking').attr('readonly',true).each(function(){var ul=jQuery(this).closest('ul'); ul.find('li').addClass('ranking-option'); if(uls.indexOf(ul)<0) uls.push(ul); }); 
+jQuery('.model-ranking').attr('readonly',true).each(function(){var ul=jQuery(this).closest('ul'); ul.find('li').addClass('ranking-option').find('input').addClass('hidden'); if(uls.indexOf(ul)<0) uls.push(ul); }); 
 for(var k=0; k<uls.length; k++) uls[k].sortable({stop:function(){jQuery(this).find('input.model-ranking').each(function(i){jQuery(this).val(i+1);})} });
 
diff --git static/zips/1.zip static/zips/1.zip
index 80d464f..6c09c9f 100644
Binary files static/zips/1.zip and static/zips/1.zip differ
diff --git views/default/elections.html views/default/elections.html
index ff96896..8be6c1d 100644
--- views/default/elections.html
+++ views/default/elections.html
@@ -1,7 +1,9 @@
 {{extend 'layout.html'}}
 
+{{if auth.user.is_manager:}}
 <h2>Create a new election</h2>
 {{=A(T('New Election'),_href=URL('edit'),_class="btn")}}
+{{pass}}
 
 <h1>My Elections</h1>
 
@@ -48,13 +50,15 @@
 	<span class="caret"></span>
       </a>
       <ul class="dropdown-menu">
+	{{if not row.closed:}}
+	{{=LI(A(I(_class='icon-edit'),' ',T('Edit Election'),_href=URL('edit',args=row.id)))}}
 	{{=LI(A(I(_class='icon-play-circle'),' ',T('Start Election'),_href=URL('start',args=row.id)))}}
 	{{=LI(A(I(_class='icon-envelope'),' ',T('Send Reminder'),_href=URL('reminders',args=row.id)))}}
 	{{=LI(A(I(_class='icon-off'),' ',T('Close Election'),_href=URL('close_election',args=row.id)))}}
+	{{pass}}
 	{{=LI(A(I(_class='icon-folder-open'),' ',T('Ballots'),_href=URL('ballots',args=row.id)))}}
 	{{=LI(A(I(_class='icon-list'),' ',T('Results'),_href=URL('results',args=row.id)))}}
 	{{=LI(A(I(_class='icon-download'),' ',T('CSV Voters'),_href=URL('voters_csv.csv',args=row.id)))}}
-	{{=LI(A(I(_class='icon-edit'),' ',T('Edit Election'),_href=URL('edit',args=row.id)))}}
       </ul>
     </div>
   </td>
